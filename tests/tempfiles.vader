Include: include/setup.vader

Execute (Neomake uses temporary file for unsaved buffer):
  new
  norm iline1
  norm oline2

  let maker = {
  \ 'exe': 'cat',
  \ 'append_file': 1,
  \ 'errorformat': '%m',
  \ }
  call neomake#Make(1, [maker])
  let jobinfo = neomake#GetJobs()[0]

  let temp_file = jobinfo.maker.temp_file
  AssertEqual fnamemodify(temp_file, ':h:h'), fnamemodify(tempname(), ':h')
  AssertEqual getfperm(temp_file), 'rw-r--r--'
  NeomakeTestsWaitForFinishedJobs

  AssertEqual getloclist(0), [{
  \ 'lnum': 0,
  \ 'bufnr': bufnr('%'),
  \ 'col': 0,
  \ 'valid': 1,
  \ 'vcol': 0,
  \ 'nr': -1,
  \ 'type': '',
  \ 'pattern': '',
  \ 'text': 'line1'},
  \ {
  \ 'lnum': 0,
  \ 'bufnr': bufnr('%'),
  \ 'col': 0,
  \ 'valid': 1,
  \ 'vcol': 0,
  \ 'nr': -1,
  \ 'type': '',
  \ 'pattern': '',
  \ 'text': 'line2'}]

  AssertEqual filereadable(temp_file), 0, 'temp_file was removed'

  AssertNeomakeMessage 'Removing temporary file: '.temp_file

  bwipe!

Execute (Uses temporary file for unreadable buffer):
  new
  set ft=neomake_tests
  let g:neomake_neomake_tests_enabled_makers = ['true']
  file doesnotexist

  let fname = fnamemodify(bufname('%'), ':p')
  RunNeomake

  let bufnr = bufnr('%')
  AssertEqual len(filter(copy(g:neomake_test_messages),
  \ "v:val[1] =~ '^Using tempfile for unreadable buffer '.bufnr")), 1, 'message found'

  bd!

Execute (2nd maker uses temporary file):
  call g:NeomakeSetupAutocmdWrappers()

  new
  set ft=python
  file doesnotexist

  let maker1 = {
      \ 'exe': 'true',
      \ 'name': 'true_maker',
      \ 'errorformat': '%m',
      \ 'append_file': 0,
      \ }
  let maker2 = copy(maker1)
  let maker2.append_file = 1
  let maker3 = copy(maker1)

  let fname = fnamemodify(bufname('%'), ':p')
  call neomake#Make(1, [maker1, maker2, maker3])
  let make_id = neomake#GetStatus().last_make_id

  let bufnr = bufnr('%')
  AssertEqual len(filter(copy(g:neomake_test_messages),
  \ "v:val[1] =~ '^Using tempfile for unreadable buffer '.bufnr")), 1, 'message found'
"   AssertNeomakeMessage 'file is not readable ('.fname.')', 0, {'make_id': make_id}
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual len(g:neomake_test_jobfinished), 3
  bd!
